version: '3.8'

services:
  # Frontend React
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: startup-frontend
    restart: unless-stopped
    environment:
      - NODE_ENV=production
      - REACT_APP_API_URL=https://api.seudominio.com
    networks:
      - app-network
    depends_on:
      - backend

  # Backend Node.js
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: startup-backend
    restart: unless-stopped
    environment:
      - NODE_ENV=production
      - PORT=3000
      - DATABASE_URL=postgresql://postgres:postgres@db:5432/startup
      - JWT_SECRET=sua_chave_secreta_aqui
      - REDIS_URL=redis://redis:6379
    networks:
      - app-network
    depends_on:
      - db
      - redis

  # Nginx Reverse Proxy
  nginx:
    image: nginx:alpine
    container_name: startup-nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./backend/nginx/conf.d:/etc/nginx/conf.d
      - ./backend/nginx/ssl:/etc/nginx/ssl
      - ./frontend/build:/usr/share/nginx/html
    networks:
      - app-network
    depends_on:
      - frontend
      - backend

  # PostgreSQL Database
  db:
    image: postgres:14-alpine
    container_name: startup-db
    restart: unless-stopped
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
      - POSTGRES_DB=startup
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - app-network

  # Redis Cache
  redis:
    image: redis:alpine
    container_name: startup-redis
    restart: unless-stopped
    volumes:
      - redis_data:/data
    networks:
      - app-network

networks:
  app-network:
    driver: bridge

volumes:
  postgres_data:
  redis_data: 